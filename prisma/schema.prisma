
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model IncidentType{
  id  String  @id  @default(uuid())
  numRef      String  @unique
  name  String
  createdBy String
  updatedBy String?
  incident Incident[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true)
}


model IncidentCause{
  id   String @id @default(uuid())
  numRef      String  @unique
  name  String
  createdBy String
  updatedBy String?
  incident Incident[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true)
}


model Equipement{
  id  String  @id @default(uuid())
  numRef      String  @unique
  name  String
  incidents Incident[]
  siteId      String
  maintenance Maintenance[]
  createdBy String
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 
}


model Consommable{
  id  String  @id   @default(uuid())
  numRef      String  @unique
  name  String @unique
  incident Incident[]
  createdBy String
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 
}

model MaintenanceType{
  id  String  @id  @default(uuid())
  numRef      String @unique
  name  String
  createdBy String
  hasIncident   Boolean @default(false)
  hasProjectionDate   Boolean @default(true)
  updatedBy String?
  maintenace Maintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 
}

model Incident{
  id   String @id @default(uuid())
  numRef      String  @unique
  incidentId  String
  incident  IncidentType @relation(fields: [incidentId], references: [id])
  equipementId String
  equipement  Equipement @relation(fields: [equipementId], references: [id])
  siteId String
  shiftId String
  consomableId String?
  consommable Consommable? @relation(fields: [consomableId], references: [id])
  maintenance Maintenance?
  incidentCauseId String
  incidentCauses IncidentCause @relation(fields: [incidentCauseId], references: [id]) 
  userId  String
  description String?
  createdBy String
  updatedBy String?
  status  INCIDENT_STATUS @default(PENDING)
  
  creationDate DateTime @default(now())
  closedDate   DateTime?
  isActive  Boolean   @default(true)
}

model Maintenance{
  id  String  @id  @default(uuid())
  numRef      String  @unique
  maintenanceId String
  maintenance MaintenanceType @relation(fields: [maintenanceId], references: [id])
  incidentId  String?  @unique
  incident    Incident?        @relation(fields: [incidentId], references: [id])
  equipementId         String
  equipement           Equipement       @relation(fields: [equipementId], references: [id])
  siteId  String
  status  MAINTENANCE_STATUS @default(PENDING)
  projectedDate   DateTime?
  nextMaintenance DateTime?
  effectifDate DateTime?
  description String?
  supplierId String?
  userId  String?
  closedDate  DateTime?
  createdBy String
  updatedBy String?


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 
}

enum INCIDENT_STATUS{
  PENDING
  CLOSED
  UNDER_MAINTENANCE
}

enum MAINTENANCE_STATUS{
  PENDING
  CLOSED
}