
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model incidenttype{
  id          String  @id  @default(uuid())
  numRef      String  @unique
  name        String  @unique
  createdBy   String
  updatedBy   String?
  incident incident[]
  incidentCause incidentcause[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true)

}


model incidentcause{
  id   String @id @default(uuid())
  numRef      String  @unique
  name  String
  incident incident[]
  incidentType  incidenttype[]
  offBridge offbridge[]
  
  createdBy String
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true)

}


model equipement{
  id          String  @id @default(uuid())
  numRef      String  @unique
  name        String  @unique
  siteId      String?
  incidents   incident[]
  maintenance maintenance[]
  createdBy   String
  updatedBy   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean @default(true) 

}


model consommable{
  id          String  @id   @default(uuid())
  numRef      String  @unique
  name        String @unique
  incident    incident[]
  createdBy   String
  updatedBy   String?

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 

}

model maintenancetype{
  id  String  @id  @default(uuid())
  numRef      String @unique
  name  String  @unique
  createdBy String
  hasIncident   Boolean @default(false)
  hasProjectionDate   Boolean @default(true)
  updatedBy String?
  maintenace maintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 

}

model incident{
  id   String @id @default(uuid())
  numRef      String  @unique

  incidentId  String
  incident  incidenttype @relation(fields: [incidentId], references: [id])

  equipementId String?
  equipement  equipement? @relation(fields: [equipementId], references: [id])
  siteId String?
  shiftId String?

  consomableId String?
  consommable consommable? @relation(fields: [consomableId], references: [id])

  maintenance maintenance?

  incidentCauseId String?
  incidentCauses incidentcause? @relation(fields: [incidentCauseId], references: [id]) 

  userId  String?
  description String?

  createdBy String
  closedBy String?

  updatedBy String?
  status  INCIDENT_STATUS @default(PENDING)
  
  creationDate DateTime @default(now())
  closedDate   DateTime?
  isActive  Boolean   @default(true)

}

model offbridge{
  id           String         @id      @default(uuid())
  numRef              String  @unique
  incidentCauseId     String
  incidentCauses      incidentcause    @relation(fields: [incidentCauseId], references: [id])
  operation           OPERATION_TYPE?
  declarationType     DECLARATION_TYPE?
  paymentMode         PAYMENT_MODE     @default(CASH)
  siteId       String
  tier         String
  container1   String?
  container2   String?
  plomb1       String?
  plomb2       String?
  loader       String
  product      String
  transporter  String
  vehicle      String
  blNumber     String?
  driver       String
  trailer      String
  createdBy    String
  updatedBy String?
  
  createdAt DateTime @default(now())
  updateAt   DateTime @updatedAt  
  isActive  Boolean   @default(true)
}



model maintenance{
  id  String  @id  @default(uuid())
  numRef      String  @unique
  maintenanceId String
  maintenance maintenancetype @relation(fields: [maintenanceId], references: [id])
  incidentId  String?  @unique
  incident    incident?        @relation(fields: [incidentId], references: [id])
  equipementId         String
  equipement           equipement       @relation(fields: [equipementId], references: [id])
  siteId  String
  status  MAINTENANCE_STATUS @default(PENDING)
  projectedDate   DateTime?
  nextMaintenance DateTime?
  effectifDate DateTime?
  description String?
  supplierId String?
  userId  String?
  
  closedDate    DateTime?
  createdBy     String
  validationBy  String?
  rejectedBy    String?
  closedBy      String?
  updatedBy     String?


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean @default(true) 

}

enum INCIDENT_STATUS{
  PENDING
  CLOSED
  UNDER_MAINTENANCE
}

enum MAINTENANCE_STATUS{
  AWAITING_VALIDATION
  PENDING
  CLOSED
}

enum OPERATION_TYPE{
  IMPORT
  EXPORT
  TRANSIT
  OTHERS
}

enum DECLARATION_TYPE{
  CONTAINER
  BULK
  CONVENTIONAL_WOOD_LOG
  HEAVY_BULK
  CONVENTIONAL_LUMBER
}

enum PAYMENT_MODE{
  CASH
  MOBILE
}